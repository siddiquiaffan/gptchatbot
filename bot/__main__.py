from bot.lib import get_response, get_image
from bot.db import db
import asyncio
from pyrogram import Client, filters, enums
import json
import os
from dotenv import load_dotenv
load_dotenv()

app = Client(
    name="mybot",
    bot_token=os.environ.get("BOT_TOKEN"),
    api_id = os.environ.get("API_ID"),
    api_hash = os.environ.get("API_HASH"),
)

def add_to_db(user_id, text):
    db.setex(user_id, 60 * 5, text)
    

default_prompt = """You: Hii, who are you?
AI: I am a chatbot. I am here to help you. You can ask me anything. I will try to answer your questions. If ask you to create image from a text query, reply back with a python json "{"action":"image","prompt":query of the image}"
You: """


@app.on_message(filters.command("start"))
async def start(client, message):
    await message.reply_text("Hi, I am a chatbot. I am here to help you. You can ask me anything. I will try to answer your questions. \n\n Created by @AffanTheBest")


@app.on_message(filters.command("reset"))
async def reset(client, message):
    db.set(message.chat.id, default_prompt)
    await message.reply_text("Your previous queries have been deleted.")


@app.on_message(filters.command("help"))
async def help(client, message):
    msg = f"""Thank you for using our Telegram bot. The /help command will provide information about the various features and commands available on our bot. This command will provide a brief overview of each command, as well as steps on how to use them. If you have any questions or need further assistance, please feel free to contact us. Thank you for using our bot and we hope you enjoy it!

Commands: 
/start - Starts a conversation with the bot 
/help - Provides an overview of all the features and commands available 
/image - Generates an image based on your query
/reset - Deletes your previous queries
/terms - Provides information about the terms and conditions of the bot
/about - Provides information about the bot 

We hope this helps you get the most out of our Telegram bot. If you have any questions or need further assistance, please don't hesitate to contact us. Thank you for using our bot and we hope you enjoy it!
    """
    await message.reply_text(msg)


@app.on_message(filters.command("terms"))
async def terms(client, message):
    msg = f"""By using our service, you agree to the following terms and conditions: 

1. You agree to be bound by the Terms of Use, which may be changed from time to time. 

2. You are responsible for ensuring that all information provided is accurate and up to date. 

3. You accept that our service is provided "as is" and we cannot guarantee the accuracy of information provided. 

4. You accept that we are not liable for any damages or losses resulting from the use of our service. 

5. You understand that we may modify the content and services provided at any time without any prior notice. 

6. You accept that all data and information is stored on our servers and is subject to our Privacy Policy. 

7. You agree to use the service only for lawful purposes. 

    """
    await message.reply_text(msg)


# /image - Generates an image based on your query using openai.Image.create
@app.on_message(filters.command("image"))
def image(client, message):
    client.send_chat_action(message.chat.id, enums.ChatAction.UPLOAD_PHOTO)
    img_url = get_image(message.text[7:])
    message.reply_photo(img_url, quote=True)
    message.reply_document(img_url, file_name="image.png", caption="Generated by @ChatGPTBot")


@app.on_message(filters.text)
async def chatgpt(client, message):
    async def handle_progress():
        await client.send_chat_action(message.chat.id, enums.ChatAction.UPLOAD_PHOTO)

    await client.send_chat_action(message.chat.id, enums.ChatAction.TYPING)

    query = db.get(message.chat.id)
    query = default_prompt if query is None else query.decode("utf-8")
    # print(message.chat.id, len(query))
    query += f"""{message.text} \nAI:"""
    query = query[-2048:] if len(query) > 2048 else query

    response = get_response(query)

    obj = {}
    try:
        obj = json.loads(response)
    except:
        pass
    
    if 'action' in obj and obj['action'] == "image":
        img_url = get_image(obj['prompt'])
        await message.reply_document(img_url, quote=True, file_name="image.png", caption="Generated by @ChatGPTBot \n\nUse /image command for better experience.", progress=handle_progress)

    else:
        query += f"""{response} \nYou:"""    
        add_to_db(message.chat.id, query)

        await message.reply_text(response, quote=True)

app.run()
app.get_me()
